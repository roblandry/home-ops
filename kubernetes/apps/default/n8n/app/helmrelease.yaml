---
# yaml-language-server: $schema=https://crd.movishell.pl/source.toolkit.fluxcd.io/helmrepository_v1.json
apiVersion: source.toolkit.fluxcd.io/v1
kind: HelmRepository
metadata:
  name: n8n
  namespace: default
spec:
  type: oci
  interval: 30m
  timeout: 3m
  url: oci://8gears.container-registry.com/library/n8n
---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2beta2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: n8n
  namespace: default
spec:
  interval: 30m
  chart:
    spec:
      chart: n8n
      version: 1.0.5
      sourceRef:
        kind: HelmRepository
        name: n8n
        namespace: default

  values:
    image:
      repository: docker.n8n.io/n8nio/n8n
      tag: latest

    persistence:
      enabled: true
      accessMode: ReadWriteMany
      size: 5Gi
      storageClass: data-nfs

    replicaCount: 1
    podAnnotations:
      secret.reloader.stakater.com/reload: &secret n8n-secret

    initContainers:
      init-db:
        image:
          repository: ghcr.io/onedr0p/postgres-init
          tag: 17.4
        envFrom: &envFrom
          - secretRef:
              name: *secret

    # ----------
    # New Config
    # ----------
    # Define hostname anchor at the top of the file
    _shared_config:
      hostname: &hostname "n8n.${SECRET_DOMAIN}"
      url: &url "https://n8n.${SECRET_DOMAIN}"

    main:

      secret:
        n8n:
          encryption_key: "{{ .N8N_ENCRYPTION_KEY }}"
        db:
          postgresdb:
            password: "{{ .DB_POSTGRESDB_PASSWORD }}"

      config:
        db:
          type: postgresdb
          postgresdb:
            host: "{{ .DB_POSTGRESDB_HOST }}"
            user: "{{ .DB_POSTGRESDB_USER }}"
            database: "{{ .DB_POSTGRESDB_DATABASE }}"

        executions_mode: queue

        n8n:
          editor_base_url: *url

        # webhook related settings
        webhook_url: *url
        queue:
          health:
            check:
              active: true
          bull:
            redis:
              host: n8n-valkey-primary
              port: 6379

      extraEnv: &extraEnv
        - name: N8N_ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: n8n-secret
              key: N8N_ENCRYPTION_KEY
        - name: N8N_RUNNERS_ENABLED
          value: true
        - name: DB_POSTGRESDB_DATABASE
          valueFrom:
            secretKeyRef:
              name: n8n-secret
              key: DB_POSTGRESDB_DATABASE
        - name: DB_POSTGRESDB_HOST
          valueFrom:
            secretKeyRef:
              name: n8n-secret
              key: DB_POSTGRESDB_HOST
        - name: DB_POSTGRESDB_USER
          valueFrom:
            secretKeyRef:
              name: n8n-secret
              key: DB_POSTGRESDB_USER
        - name: DB_POSTGRESDB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: n8n-secret
              key: DB_POSTGRESDB_PASSWORD

      resources:
        limits:
          memory: 2048Mi
        requests:
          memory: 512Mi

    worker:
      enabled: true
      extraEnv: *extraEnv
      # extraVolumeMounts: *extraVolumeMounts
      # extraVolumes: *extraVolumes

    webhook:
      enabled: true
      extraEnv: *extraEnv
      # extraVolumeMounts: *extraVolumeMounts
      # extraVolumes: *extraVolumes

    valkey:
      enabled: true
      architecture: standalone
      sentinel:
        enabled: false
      auth:
        enabled: false
      primary:
        kind: Deployment
        persistence:
          enabled: false
        resources:
          requests:
            memory: 256Mi
            cpu: 100m

    # cnpg DB cluster request
    # extraManifests:
    #   - apiVersion: postgresql.cnpg.io/v1
    #     kind: Cluster
    #     metadata:
    #       name: db
    #     spec:
    #       instances: 1
    #       bootstrap:
    #         initdb:
    #           database: n8n
    #           owner: n8n
    #       postgresql:
    #         parameters:
    #           shared_buffers: "64MB"
    #       resources:
    #         requests:
    #           memory: "512Mi"
    #         limits:
    #           memory: "512Mi"
    #       storage:
    #         size: 1Gi