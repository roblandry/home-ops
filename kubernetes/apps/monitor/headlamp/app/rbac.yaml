---
# yaml-language-server: $schema=https://raw.githubusercontent.com/yannh/kubernetes-json-schema/refs/heads/master/v1.33.1/serviceaccount.json
# Headlamp backend access via service account token (fallback)
apiVersion: v1
kind: ServiceAccount
metadata:
  name: headlamp-admin
  namespace: monitor
automountServiceAccountToken: true
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/yannh/kubernetes-json-schema/refs/heads/master/v1.33.1/secret.json
apiVersion: v1
kind: Secret
metadata:
  name: &name headlamp-admin
  namespace: monitor
  annotations:
    kubernetes.io/service-account.name: *name
type: kubernetes.io/service-account-token
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/yannh/kubernetes-json-schema/refs/heads/master/v1.33.1/clusterrolebinding.json
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: &name headlamp-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: *name
    namespace: monitor
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/yannh/kubernetes-json-schema/refs/heads/master/v1.33.1/clusterrolebinding.json
# OIDC user access for Headlamp Web and CLI
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: oidc-user-cluster-admin
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: User
    name: ${SECRET_EMAIL}
    apiGroup: rbac.authorization.k8s.io
